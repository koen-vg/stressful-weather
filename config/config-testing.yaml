# SPDX-FileCopyrightText: 2023 Koen van Greevenbroek & Aleksander Grochowicz
#
# SPDX-License-Identifier: CC0-1.0

# The name needs to match the filename of this config.
name: "testing"

# The scenario config is used only in order to determine which results
# are required for the various "*_all_*" Snakemake rules. Each entry
# corresponds to a Snakemake wildcard. Multiple values may be
# specified for each wildcard; all combinations will be computed. See
# the Snakefile for a description of each wildcard.
scenario:
  # year: ["1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"]
  year: ["2016-2019"]
  simpl: ["10"]
  clusters: ["5m"]
  ll: ["c1.25"]
  opts: ["Co2L0.0-24H"]


difficult_periods:
  min_cost: 2.e+9  # minimum total cost of difficult period in EUR
  min_length: 12     # minimum duration in hours
  max_length: 336    # maximum duration in hours; 14 days


# The following section is used as pypsa-eur configuration (updating
# the default pypsa-eur config)
pypsa-eur:
  run:
    shared_cutouts: True

  enable:
    retrieve_opsd_load_data: False
    retrieve_artificial_load_data: True
    drop_leap_days: True
    build_cutout: False
    retrieve_cutout: False

  snapshots:
    # The date (in MM-DD) at which each year is taken to start. If not
    # specified, this is taken to be "01-01", meaning the years start
    # on the 1st of January by default. By setting this date to
    # sometime in the summer, however, one can preserve the
    # meteorological winter within each 1-year period.
    # P.S. Please do not make the boundary a leap day.
    year_boundary: "07-01" # if this is not "01-01" then we need to cut out a year earlier in the scenario because this just defines the starting point of the snapshot

  countries: ["NO"]

  # For all the following configuration, see the PyPSA-Eur documentation.
  electricity:
    co2limit: 7.75e+7 # 0.05 * 3.1e9*0.5
    co2base: 1.487e+9

    extendable_carriers:
      Generator: ["solar", "onwind", "offwind-ac", "offwind-dc"]
      StorageUnit: ["battery", "H2"]
      Store: []
      Link: []

    # Use all renewable carriers
    renewable_carriers: ["solar", "onwind", "offwind-ac", "offwind-dc", "hydro"]
    conventional_carriers: ["nuclear", "biomass"] # nuclear, oil, OCGT, CCGT, coal, lignite, geothermal, biomass

    # Remove nuclear from Germany.
    powerplants_filter: "(Country != 'DE') or (Fueltype != 'Nuclear')"

    # Make this a greenfield optimisation w.r.t. renewables.
    estimate_renewable_capacities:
      enable: false

  load:
    # Baseline in European Commission scenario from
    # https://ec.europa.eu/clima/eu-action/european-green-deal/2030-climate-target-plan_en
    scaling_factor: 1.13
    interpolate_limit: 3 # data gaps up until this size are interpolated linearly
    time_shift_for_large_gaps: 3w # data gaps up until this size are copied by copying from
    manual_adjustments: true
    power_statistics: true
    

  atlite:
    nprocesses: 4
    show_progress: False # This improves performance by a lot.
    cutouts:
      europe-era5: 
        module: "era5"
        x: [-16.5, 40.5]
        y: [33., 75.]
        dx: 0.25
        dy: 0.25

  renewable:
    # Note that the cutouts have been renamed from default PyPSA-Eur.
    onwind:
      cutout: "europe-era5"
    offwind-ac:
      cutout: "europe-era5"
    offwind-dc:
      cutout: "europe-era5"
    solar:
      cutout: "europe-era5"
    hydro:
      cutout: "europe-era5"
      eia_correct_by_capacity: true
      eia_approximate_missing: true

  clustering:
    # We use a single year to base all network clustering on, so that
    # this is the same across models using different weather years.
    constant_base_year: 2013
    simplify_network:
      algorithm: kmeans
    cluster_network:
      algorithm: hac

  solving:
    options:
      linopy: True
      formulation: "kirchhoff"
      noisy_costs: False
      skip_iterations: False
      track_iterations: False
      min_iterations: 1
      max_iterations: 6
    tmpdir: "./tmp/"
    solver:
      name: "gurobi"
      LogToConsole: 1
      threads: 5
      method: 2 # barrier
      crossover: 0
      BarConvTol: 1.e-5
      AggFill: 0
      PreDual: 0
      GURO_PAR_BARDENSETHRESH: 200

      # Settings for numerical focus:
      NumericFocus: 3       # Favour numeric stability over speed
      BarHomogeneous: 1     # Use homogeneous barrier if standard does not converge
      FeasibilityTol: 1.e-4
      OptimalityTol: 1.e-4

      # Normal settings:
      # FeasibilityTol: 1.e-6
